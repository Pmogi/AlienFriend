-- Lib
local Timer = require("lib/timer")

-- Modules, game states
local Game = require("src/states/game")
local Menu = require("src/states/menu")

local gameState
local PlayGame = 1
local PlayMenu = 0
local gravityFactor = 1 -- increase or decrease gravity with this variable

local world
local objects = {}

function love.load()
    love.physics.setMeter(64) -- 1 meter = 64px
    
    world = love.physics.newWorld(0, 9.81*64*gravityFactor, true) -- 

    objects.ground = {}
    
    -- in the objects table, store the table ground
    -- ground has a body that's a part of world, a rectangle shape that represents the ground, and a fixture that connects the body to the shape
    objects.ground.body = love.physics.newBody(world, love.graphics.getWidth()/2,love.graphics.getHeight()/2 + 300)
    objects.ground.shape = love.physics.newRectangleShape(650, 50)
    objects.ground.fixture = love.physics.newFixture(objects.ground.body, objects.ground.shape)

    objects.ground2 = {}

    objects.ground2.body = love.physics.newBody(world, love.graphics.getWidth()/2,love.graphics.getHeight()/2 + 300)
    objects.ground2.shape = love.physics.newRectangleShape(50, 650)
    objects.ground2.fixture = love.physics.newFixture(objects.ground2.body, objects.ground2.shape)


    -- ball object
    objects.ball = {}
    
    objects.ball.body = love.physics.newBody(world,
                                             love.graphics.getWidth()  /2,
                                             love.graphics.getHeight() /2,
                                             "dynamic")

    objects.ball.shape = love.physics.newCircleShape(20) -- radius of the circle shape

    objects.ball.fixture = love.physics.newFixture(objects.ball.body, objects.ball.shape, 1) -- give body, shape, and the density
    objects.ball.fixture:setRestitution(0.5) -- the how much velocity is kept after colliding 

end

function love.draw( )
    love.graphics.setColor(0.28, 0.63, 0.05) -- green
    love.graphics.polygon("fill", objects.ground.body:getWorldPoints(objects.ground.shape:getPoints()))

    love.graphics.setColor(0.28, 0.63, 0.05) -- green
    love.graphics.polygon("fill", objects.ground2.body:getWorldPoints(objects.ground2.shape:getPoints()))

    love.graphics.setColor(1, 1, 0, 1)
    love.graphics.circle("fill", objects.ball.body:getX(), objects.ball.body:getY(), objects.ball.shape:getRadius() )

end

function love.update( dt )
    world:update(dt)
    Timer.update(dt)

    if love.keyboard.isDown("right") then --press the right arrow key to push the ball to the right
        objects.ball.body:applyForce(400, 0)
      elseif love.keyboard.isDown("left") then --press the left arrow key to push the ball to the left
        objects.ball.body:applyForce(-400, 0)
      elseif love.keyboard.isDown("up") then --press the up arrow key to set the ball in the air
        objects.ball.body:setPosition(650/2, 650/2)
        objects.ball.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
      end
end

function startGame()
    Game.new()
end